name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the tag name
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Generate release notes from changelog
          if [ -f CHANGELOG.md ]; then
            # Extract notes for this version from CHANGELOG.md
            sed -n "/## \[$TAG_NAME\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
            if [ ! -s release_notes.md ]; then
              echo "Release $TAG_NAME" > release_notes.md
              echo "" >> release_notes.md
              echo "See [CHANGELOG.md](./CHANGELOG.md) for details." >> release_notes.md
            fi
          else
            echo "Release $TAG_NAME" > release_notes.md
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_notes.outputs.tag_name }}
          release_name: Setup Groovy ${{ steps.release_notes.outputs.tag_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Update Major Version Tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          MAJOR_VERSION=$(echo $TAG_NAME | sed 's/\([^.]*\).*/\1/')
          
          # Force update the major version tag to point to this commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -fa $MAJOR_VERSION -m "Update $MAJOR_VERSION to $TAG_NAME"
          git push origin $MAJOR_VERSION --force
